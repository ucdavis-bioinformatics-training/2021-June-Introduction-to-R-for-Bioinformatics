# FALSE means at least one rep had zero counts
diff1[which(diff1[,2]==FALSE),2] = "N"
# TRUE means went from FALSE to TRUE, all control to all treatment
diff1[which(diff1[,3]==TRUE),3] = "Y"
# FALSE means went from TRUE to FALSE, TRUE to TRUE, or FALSE to FALSE
diff1[which(diff1[,3]==FALSE),3] = "N"
fdpa = fd > 0
control = fdpa[,5] | fdpa[,7] | fdpa[,9]
treatment = fdpa[,4] & fdpa[,6] & fdpa[,8]
diff1 = cbind(control,treatment,treatment & !control)
# TRUE means at least one rep had counts, so put N
diff1[which(diff1[,1]==TRUE),1] = "N"
# FALSE means all reps had zero counts so put Y
diff1[which(diff1[,1]==FALSE),1] = "Y"
# TRUE means all reps had >0 counts
diff1[which(diff1[,2]==TRUE),2] = "Y"
# TRUE means went from FALSE to TRUE, all control to all treatment
diff1[which(diff1[,3]==TRUE),3] = "Y"
# FALSE means went from TRUE to FALSE, TRUE to TRUE, or FALSE to FALSE
diff1[which(diff1[,3]==FALSE),3] = "N"
diff1 = cbind(rownames(diff1),diff1)
colnames(diff1) = c("mirbaseID","Not present in all control reps?","Present in all treatment reps?","Change from not present to present?")
diff1
# FALSE means went from TRUE to FALSE, TRUE to TRUE, or FALSE to FALSE
diff1[which(diff1[,3]==FALSE),3] = "N"
diff1
control = fdpa[,5] & fdpa[,7] & fdpa[,9]
treatment = fdpa[,4] | fdpa[,6] | fdpa[,8]
diff2 = cbind(control,treatment,!treatment & control)
# TRUE means all reps had >0 counts
diff2[which(diff2[,1]==TRUE),1] = "Y"
# FALSE means at least one rep had zero counts
diff2[which(diff2[,1]==FALSE),1] = "N"
# TRUE means at least one rep had counts, so put N
diff2[which(diff2[,2]==TRUE),2] = "N"
# FALSE means all reps had zero counts
diff2[which(diff2[,2]==FALSE),2] = "Y"
# TRUE means went from TRUE to FALSE, all control to all treatment
diff2[which(diff2[,3]==TRUE),3] = "Y"
# FALSE means went from FALSE to TRUE, TRUE to TRUE, or FALSE to FALSE
diff2[which(diff2[,3]==FALSE),3] = "N"
diff2 = cbind(rownames(diff2),diff2)
fdpa = fd > 0
control = fdpa[,5] | fdpa[,7] | fdpa[,9]
treatment = fdpa[,4] & fdpa[,6] & fdpa[,8]
diff1 = cbind(control,treatment,treatment & !control)
# TRUE means at least one rep had counts, so put N
diff1[which(diff1[,1]==TRUE),1] = "N"
# FALSE means all reps had zero counts so put Y
diff1[which(diff1[,1]==FALSE),1] = "Y"
# TRUE means all reps had >0 counts
diff1[which(diff1[,2]==TRUE),2] = "Y"
# FALSE means at least one rep had zero counts
diff1[which(diff1[,2]==FALSE),2] = "N"
# TRUE means went from FALSE to TRUE, all control to all treatment
diff1[which(diff1[,3]==TRUE),3] = "Y"
# FALSE means went from TRUE to FALSE, TRUE to TRUE, or FALSE to FALSE
diff1[which(diff1[,3]==FALSE),3] = "N"
diff1 = cbind(rownames(diff1),diff1)
colnames(diff1) = c("mirbaseID","Absent in all control reps?","Present in all treatment reps?","Change from absent to present?")
control = fdpa[,5] & fdpa[,7] & fdpa[,9]
treatment = fdpa[,4] | fdpa[,6] | fdpa[,8]
diff2 = cbind(control,treatment,!treatment & control)
# TRUE means all reps had >0 counts
diff2[which(diff2[,1]==TRUE),1] = "Y"
# FALSE means at least one rep had zero counts
diff2[which(diff2[,1]==FALSE),1] = "N"
# TRUE means at least one rep had counts, so put N
diff2[which(diff2[,2]==TRUE),2] = "N"
# FALSE means all reps had zero counts
diff2[which(diff2[,2]==FALSE),2] = "Y"
# TRUE means went from TRUE to FALSE, all control to all treatment
diff2[which(diff2[,3]==TRUE),3] = "Y"
# FALSE means went from FALSE to TRUE, TRUE to TRUE, or FALSE to FALSE
diff2[which(diff2[,3]==FALSE),3] = "N"
diff2 = cbind(rownames(diff2),diff2)
colnames(diff2) = c("mirbaseID","Present in all control reps?","Absent in all treatment reps?","Change from present to absent?")
diff2
require("knitr")
opts_knit$set(root.dir = "/share/biocore/joshi/projects/primate_eyes_miRNA/new/02-mirdeep")
write.table(fdpa3, file="presence_absence_all.tsv", row.names = F, quote = F, sep="\t")
write.table(diff1, file="../presence_absence_diff1.tsv", row.names = F, quote = F, sep="\t")
write.table(diff2, file="../presence_absence_diff2.tsv", row.names = F, quote = F, sep="\t")
diff1
diff1[which(diff1[,3]=="Y"),]
diff1[which(diff1[,4]=="Y"),]
diff2[which(diff1[,4]=="Y"),]
diff2[which(diff2[,4]=="Y"),]
diff2[which(diff2[,4]=="Y"),]$mirbaseID
diff2[which(diff2[,4]=="Y"),"mirbaseID"]
require("knitr")
opts_knit$set(root.dir = "/share/biocore/joshi/projects/VGL_GBS_pipeline/exps")
setwd("/share/biocore/joshi/projects/VGL_GBS_pipeline/exps")
dir="94-20200316rhm"
hotspot_file="ref/WGAG19048_UCD_RHMv01_Hotspot_A.bed"
ion_allele_files = Sys.glob(paste0(dir,"/ion_allele_xls/*.xls"))
ion_alleles = lapply(ion_allele_files, function(x) read.table(x, header=T, stringsAsFactors = F, sep="\t"))
ion_ids = regmatches(ion_allele_files, regexpr("IonCode_\\d+", ion_allele_files))
ion_ids = paste0(dir,"_",ion_ids)
names(ion_alleles) = ion_ids
ion_pos = lapply(names(ion_alleles), function(x) {rp = which(ion_alleles[[x]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent")); paste0(ion_alleles[[x]][rp,'Chrom'],"_", ion_alleles[[x]][rp,'Position'])})
names(ion_pos) = ion_ids
hotspot = read.table(hotspot_file, skip=1, header=F, stringsAsFactors = F)
hotspot_pos = paste0(hotspot[,1],"_",hotspot[,3])
final = matrix(0, nrow=length(hotspot_pos), ncol=length(names(ion_pos)))
rownames(final) = hotspot_pos
colnames(final) = ion_ids
for (x in colnames(final)) {
pos = ion_pos[[x]]
overlap = intersect(pos,hotspot_pos)
final[overlap,x] = 1
}
numfail = rowSums(final==0)
redesign = numfail > ncol(final) * 0.1
redesign = gsub("FALSE","-",redesign)
redesign = gsub("TRUE","Y",redesign)
getfreq_by_pos <- function(samp) {
rp = which(ion_alleles[[samp]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent"))
chrpos = paste0(ion_alleles[[samp]][rp,'Chrom'],"_", ion_alleles[[samp]][rp,'Position'])
fcp = ion_alleles[[samp]][rp,'Frequency']
names(fcp) = chrpos
retval=fcp[hotspot_pos]
names(retval) = hotspot_pos
return(retval)
}
freqpos = lapply(ion_ids, function(x) getfreq_by_pos(x))
names(freqpos) = ion_ids
library(tidyverse)
fqpos = tibble(data = freqpos) %>%
group_by(name = names(data)) %>%
unnest(cols=c(data)) %>%
mutate(chrpos = hotspot_pos) %>%
spread(name, data)
allele_perc = rowSums(fqpos[,2:ncol(fqpos)], na.rm = TRUE) / rowSums(!is.na(fqpos[,2:ncol(fqpos)]))
names(allele_perc) = fqpos$chrpos
allele_perc = sprintf("%0.2f", allele_perc)
marker_type = allele_perc
marker_type[allele_perc>=40 & allele_perc<=60] = "Parentage Marker"
marker_type[allele_perc>=80] = "Trait Marker"
marker_type[allele_perc<40 | (allele_perc>60 & allele_perc<80)] = "Ambiguous"
hs = ion_alleles[[1]]$Allele.Source == "Hotspot"
rv = ion_alleles[[1]][hs,c("Ref","Variant")]
outdata = cbind(fqpos$chrpos, rv, numfail, sprintf("%0.2f",(numfail/length(ion_alleles)) * 100),  allele_perc)
colnames(outdata) = c("Marker","Ref", "Alt", "Num of Failures", "Failure Percentage", "Avg Alt Allele Perc")
write.table(outdata, file=paste0(dir,".marker_data.tsv"), quote = F, col.names = T, sep="\t", row.names = F)
require("knitr")
opts_knit$set(root.dir = "/share/biocore/joshi/projects/VGL_GBS_pipeline/exps")
setwd("/share/biocore/joshi/projects/VGL_GBS_pipeline/exps")
dir="86-20191104K9"
hotspot_file="ref/UCDavis_Canine.hotspot_A.bed"
ion_allele_files = Sys.glob(paste0(dir,"/ion_allele_xls/*.xls"))
ion_alleles = lapply(ion_allele_files, function(x) read.table(x, header=T, stringsAsFactors = F, sep="\t"))
ion_ids = regmatches(ion_allele_files, regexpr("IonCode_\\d+", ion_allele_files))
ion_ids = paste0(dir,"_",ion_ids)
names(ion_alleles) = ion_ids
ion_pos = lapply(names(ion_alleles), function(x) {rp = which(ion_alleles[[x]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent")); paste0(ion_alleles[[x]][rp,'Chrom'],"_", ion_alleles[[x]][rp,'Position'])})
names(ion_pos) = ion_ids
hotspot = read.table(hotspot_file, skip=1, header=F, stringsAsFactors = F)
hotspot_pos = paste0(hotspot[,1],"_",hotspot[,3])
final = matrix(0, nrow=length(hotspot_pos), ncol=length(names(ion_pos)))
rownames(final) = hotspot_pos
colnames(final) = ion_ids
for (x in colnames(final)) {
pos = ion_pos[[x]]
overlap = intersect(pos,hotspot_pos)
final[overlap,x] = 1
}
numfail = rowSums(final==0)
redesign = numfail > ncol(final) * 0.1
redesign = gsub("FALSE","-",redesign)
redesign = gsub("TRUE","Y",redesign)
getfreq_by_pos <- function(samp) {
rp = which(ion_alleles[[samp]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent"))
chrpos = paste0(ion_alleles[[samp]][rp,'Chrom'],"_", ion_alleles[[samp]][rp,'Position'])
fcp = ion_alleles[[samp]][rp,'Frequency']
names(fcp) = chrpos
retval=fcp[hotspot_pos]
names(retval) = hotspot_pos
return(retval)
}
freqpos = lapply(ion_ids, function(x) getfreq_by_pos(x))
names(freqpos) = ion_ids
library(tidyverse)
fqpos = tibble(data = freqpos) %>%
group_by(name = names(data)) %>%
unnest(cols=c(data)) %>%
mutate(chrpos = hotspot_pos) %>%
spread(name, data)
allele_perc = rowSums(fqpos[,2:ncol(fqpos)], na.rm = TRUE) / rowSums(!is.na(fqpos[,2:ncol(fqpos)]))
names(allele_perc) = fqpos$chrpos
allele_perc = sprintf("%0.2f", allele_perc)
marker_type = allele_perc
marker_type[allele_perc>=40 & allele_perc<=60] = "Parentage Marker"
marker_type[allele_perc>=80] = "Trait Marker"
marker_type[allele_perc<40 | (allele_perc>60 & allele_perc<80)] = "Ambiguous"
hs = ion_alleles[[1]]$Allele.Source == "Hotspot"
rv = ion_alleles[[1]][hs,c("Ref","Variant")]
outdata = cbind(fqpos$chrpos, rv, numfail, sprintf("%0.2f",(numfail/length(ion_alleles)) * 100),  allele_perc)
colnames(outdata) = c("Marker","Ref", "Alt", "Num of Failures", "Failure Percentage", "Avg Alt Allele Perc")
write.table(outdata, file=paste0(dir,".marker_data.tsv"), quote = F, col.names = T, sep="\t", row.names = F)
require("knitr")
opts_knit$set(root.dir = "/share/biocore/joshi/projects/VGL_GBS_pipeline/exps")
setwd("/share/biocore/joshi/projects/VGL_GBS_pipeline/exps")
dir="90-20200127k9"
hotspot_file="ref/UCDavis_Canine_and_Feline.hotspot_A.bed"
ion_allele_files = Sys.glob(paste0(dir,"/ion_allele_xls/*.xls"))
ion_alleles = lapply(ion_allele_files, function(x) read.table(x, header=T, stringsAsFactors = F, sep="\t"))
ion_ids = regmatches(ion_allele_files, regexpr("IonCode_\\d+", ion_allele_files))
ion_ids = paste0(dir,"_",ion_ids)
names(ion_alleles) = ion_ids
ion_pos = lapply(names(ion_alleles), function(x) {rp = which(ion_alleles[[x]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent")); paste0(ion_alleles[[x]][rp,'Chrom'],"_", ion_alleles[[x]][rp,'Position'])})
names(ion_pos) = ion_ids
hotspot = read.table(hotspot_file, skip=1, header=F, stringsAsFactors = F)
hotspot_pos = paste0(hotspot[,1],"_",hotspot[,3])
final = matrix(0, nrow=length(hotspot_pos), ncol=length(names(ion_pos)))
rownames(final) = hotspot_pos
colnames(final) = ion_ids
for (x in colnames(final)) {
pos = ion_pos[[x]]
overlap = intersect(pos,hotspot_pos)
final[overlap,x] = 1
}
numfail = rowSums(final==0)
redesign = numfail > ncol(final) * 0.1
redesign = gsub("FALSE","-",redesign)
redesign = gsub("TRUE","Y",redesign)
getfreq_by_pos <- function(samp) {
rp = which(ion_alleles[[samp]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent"))
chrpos = paste0(ion_alleles[[samp]][rp,'Chrom'],"_", ion_alleles[[samp]][rp,'Position'])
fcp = ion_alleles[[samp]][rp,'Frequency']
names(fcp) = chrpos
retval=fcp[hotspot_pos]
names(retval) = hotspot_pos
return(retval)
}
freqpos = lapply(ion_ids, function(x) getfreq_by_pos(x))
names(freqpos) = ion_ids
library(tidyverse)
fqpos = tibble(data = freqpos) %>%
group_by(name = names(data)) %>%
unnest(cols=c(data)) %>%
mutate(chrpos = hotspot_pos) %>%
spread(name, data)
require("knitr")
opts_knit$set(root.dir = "/share/biocore/joshi/projects/VGL_GBS_pipeline/exps")
setwd("/share/biocore/joshi/projects/VGL_GBS_pipeline/exps")
dir="86-20191104K9"
hotspot_file="ref/UCDavis_Canine_and_Feline.hotspot_A.bed"
ion_allele_files = Sys.glob(paste0(dir,"/ion_allele_xls/*.xls"))
ion_alleles = lapply(ion_allele_files, function(x) read.table(x, header=T, stringsAsFactors = F, sep="\t"))
ion_ids = regmatches(ion_allele_files, regexpr("IonCode_\\d+", ion_allele_files))
ion_ids = paste0(dir,"_",ion_ids)
names(ion_alleles) = ion_ids
ion_pos = lapply(names(ion_alleles), function(x) {rp = which(ion_alleles[[x]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent")); paste0(ion_alleles[[x]][rp,'Chrom'],"_", ion_alleles[[x]][rp,'Position'])})
names(ion_pos) = ion_ids
hotspot = read.table(hotspot_file, skip=1, header=F, stringsAsFactors = F)
hotspot_pos = paste0(hotspot[,1],"_",hotspot[,3])
final = matrix(0, nrow=length(hotspot_pos), ncol=length(names(ion_pos)))
rownames(final) = hotspot_pos
colnames(final) = ion_ids
for (x in colnames(final)) {
pos = ion_pos[[x]]
overlap = intersect(pos,hotspot_pos)
final[overlap,x] = 1
}
numfail = rowSums(final==0)
redesign = numfail > ncol(final) * 0.1
redesign = gsub("FALSE","-",redesign)
redesign = gsub("TRUE","Y",redesign)
getfreq_by_pos <- function(samp) {
rp = which(ion_alleles[[samp]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent"))
chrpos = paste0(ion_alleles[[samp]][rp,'Chrom'],"_", ion_alleles[[samp]][rp,'Position'])
fcp = ion_alleles[[samp]][rp,'Frequency']
names(fcp) = chrpos
retval=fcp[hotspot_pos]
names(retval) = hotspot_pos
return(retval)
}
freqpos = lapply(ion_ids, function(x) getfreq_by_pos(x))
names(freqpos) = ion_ids
library(tidyverse)
fqpos = tibble(data = freqpos) %>%
group_by(name = names(data)) %>%
unnest(cols=c(data)) %>%
mutate(chrpos = hotspot_pos) %>%
spread(name, data)
setwd("/share/biocore/joshi/projects/VGL_GBS_pipeline/exps")
dir="86-20191104K9"
hotspot_file="ref/UCDavis_Canine.hotspot_A.bed"
ion_allele_files = Sys.glob(paste0(dir,"/ion_allele_xls/*.xls"))
ion_alleles = lapply(ion_allele_files, function(x) read.table(x, header=T, stringsAsFactors = F, sep="\t"))
ion_ids = regmatches(ion_allele_files, regexpr("IonCode_\\d+", ion_allele_files))
ion_ids = paste0(dir,"_",ion_ids)
names(ion_alleles) = ion_ids
ion_pos = lapply(names(ion_alleles), function(x) {rp = which(ion_alleles[[x]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent")); paste0(ion_alleles[[x]][rp,'Chrom'],"_", ion_alleles[[x]][rp,'Position'])})
names(ion_pos) = ion_ids
hotspot = read.table(hotspot_file, skip=1, header=F, stringsAsFactors = F)
hotspot_pos = paste0(hotspot[,1],"_",hotspot[,3])
final = matrix(0, nrow=length(hotspot_pos), ncol=length(names(ion_pos)))
rownames(final) = hotspot_pos
colnames(final) = ion_ids
for (x in colnames(final)) {
pos = ion_pos[[x]]
overlap = intersect(pos,hotspot_pos)
final[overlap,x] = 1
}
numfail = rowSums(final==0)
redesign = numfail > ncol(final) * 0.1
redesign = gsub("FALSE","-",redesign)
redesign = gsub("TRUE","Y",redesign)
getfreq_by_pos <- function(samp) {
rp = which(ion_alleles[[samp]][,'Allele.Call'] %in% c("Homozygous","Heterozygous","Absent"))
chrpos = paste0(ion_alleles[[samp]][rp,'Chrom'],"_", ion_alleles[[samp]][rp,'Position'])
fcp = ion_alleles[[samp]][rp,'Frequency']
names(fcp) = chrpos
retval=fcp[hotspot_pos]
names(retval) = hotspot_pos
return(retval)
}
freqpos = lapply(ion_ids, function(x) getfreq_by_pos(x))
names(freqpos) = ion_ids
library(tidyverse)
fqpos = tibble(data = freqpos) %>%
group_by(name = names(data)) %>%
unnest(cols=c(data)) %>%
mutate(chrpos = hotspot_pos) %>%
spread(name, data)
allele_perc = rowSums(fqpos[,2:ncol(fqpos)], na.rm = TRUE) / rowSums(!is.na(fqpos[,2:ncol(fqpos)]))
names(allele_perc) = fqpos$chrpos
allele_perc = sprintf("%0.2f", allele_perc)
marker_type = allele_perc
marker_type[allele_perc>=40 & allele_perc<=60] = "Parentage Marker"
marker_type[allele_perc>=80] = "Trait Marker"
marker_type[allele_perc<40 | (allele_perc>60 & allele_perc<80)] = "Ambiguous"
hs = ion_alleles[[1]]$Allele.Source == "Hotspot"
rv = ion_alleles[[1]][hs,c("Ref","Variant")]
outdata = cbind(fqpos$chrpos, rv, numfail, sprintf("%0.2f",(numfail/length(ion_alleles)) * 100),  allele_perc)
colnames(outdata) = c("Marker","Ref", "Alt", "Num of Failures", "Failure Percentage", "Avg Alt Allele Perc")
write.table(outdata, file=paste0(dir,".marker_data.tsv"), quote = F, col.names = T, sep="\t", row.names = F)
outdata
rowSums(fqpos[,2:ncol(fqpos)], na.rm = TRUE)
rowSums(!is.na(fqpos[,2:ncol(fqpos)])
)
fqpos
fqpos[37,]
rowSums(!is.na(fqpos[,2:ncol(fqpos)]))==0
table(rowSums(!is.na(fqpos[,2:ncol(fqpos)]))==0)
data()
ChickWeight
AirPassengers
ToothGrowth
UScitiesD
USPersonalExpenditure
mtcars
faithful
lynx
state.area
state
state.name
iris
table(iris)
table(iris$Species)
quakes
quakes
iris
colnames(iris)
iris[iris$Sepal.Length>6,]
PlantGrowth
lh
esoph
?esoph
str(eosoph)
str(eosph)
str(esoph)
esoph[esoph$tobgp == "10-19",]
esoph$tobgp
table(esoph$tobgp)
my_list <- list(Ranking=1:5, ID="a", Test=c(TRUE, FALSE, FALSE), Score=c(3.2, 103.0, 82.3))
my_list
iris
my_list
my_list[[2]]
my_list[["ID"]]
my_list$ID
iris
iris[iris$Sepal.Length>6,]
iris[iris$Sepal.Length>6,]
iris[iris$Sepal.Length>6,]$Species
table(iris[iris$Sepal.Length>6,]$Species)
iris$Sepal.Length/iris$Petal.Length
x=iris$Sepal.Length/iris$Petal.Length
iris[x>1 & x<3,]
data1 <- read.table(file="https://github.com/ucdavis-bioinformatics-training/courses/raw/master/Intro2R/raw_counts.txt", sep="\t", header=T, stringsAsFactors=F)
data1
data2 <- read.csv(file="https://github.com/ucdavis-bioinformatics-training/courses/raw/master/Intro2R/raw_counts.csv", stringsAsFactors=F)
data2
library(knitr)
colFmt = function(x,color){
outputFormat = opts_knit$get("rmarkdown.pandoc.to")
if(outputFormat == 'latex')
paste("\\textcolor{",color,"}{",x,"}",sep="")
else if(outputFormat == 'html')
paste("<font color='",color,"'>",x,"</font>",sep="")
else
x
}
knitr::opts_chunk$set(class.source = "colsel")
library(knitr)
include_graphics(c("chap3-rgraphics-heatmap-1.png", "chap3-rgraphics-darned1-1.png", "chap3-rgraphics-twodsp4-1.png"))
include_graphics("./func.png")
library(knitr)
library(kableExtra)
kable(data.frame(Operator=paste("<-", " =", sep=","), Description="Assignment", stringsAsFactors=F), align='c', caption="Assignment Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="center")
kable(data.frame(Operator=c("+", "-", "*", "/", "^", "%%", "%/%"), Description=c("Addition", "Subtraction", "Multiplication", "Division", "Exponent", "Modulus", "Integer Division"), stringsAsFactors=F), align='c', caption="Arithmetic Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="center")
kable(data.frame(Operator=c("<", ">", "<=", ">=", "==", "!="), Description=c("Less than", "Greater than", "Less than or equal to", "Greater than or equal to", "Equal to", "Not equal to"), stringsAsFactors=F), align='c', caption="Relational Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="center")
kable(data.frame(Operator=c("!", "&", "&&", "|", "||"), Description=c("Logical NOT", "Element-wise logical AND", "Logical AND", "Element-wise logical OR", "Logical OR"), stringsAsFactors=F), align='c', caption="Logical Operators in R") %>% kable_styling(bootstrap_options="striped", full_width=F, position="center")
htmltools::includeHTML("embed.html")
my_matrix
iris
data()
PlantGrowth
crimtab
presidents
women
morley
Theoph
x=print("hello")
x
Indometh
InsectSprays
ChickWeight
mtcars
data2
colnames(data2)
data2$C61 / data2$C62
data2$C61 / data2$C61
data2$C61
data2$C61 / data2$C61+1
data2$C61 / (data2$C62 + 1)
min(data2$C61)
max(data2$C61)
data2$C61/max(data2$C61)
sd(data2$C61/max(data2$C61))
head(rownames(data2))
data2['AT1G01010']
data2['AT1G01010',]
min(data2['AT1G01010',])
minval = min(data2['AT1G01010',])
maxval = maxval(data2['AT1G01010',])
maxval = max(data2['AT1G01010',])
maxval
(data2['AT1G01010',] - minval) / (maxval - minval)
x = (data2['AT1G01010',] - minval) / (maxval - minval)
sd(x)
apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x)))
apply(data2,MARGIN = 2,function(x) (x-min(x))/(max(x)-min(x)))
apply(data2,MARGIN = 2,function(x) (x-min(x))/(max(x)-min(x)))
?apply
apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x)))
t(apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x))))
ls()
data1
data2
ls()
data3
knitr::opts_chunk$set(class.source = "colsel", echo=TRUE)
# generate some random data matrix
data3 <- as.data.frame(matrix(rnorm(49), ncol=7), stringsAsFactors=F)
data3
apply(data3, MARGIN=1, sum)
sum(data3[1,])
sum(data3[,1])
sapply(data3, sum)
apply(data3, MARGIN=1, sum)
apply(data3, MARGIN=2, sum)
sapply(data2,function(x) (x-min(x))/(max(x)-min(x)))
apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x)))
t(apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x))))
apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x)))
sapply(1:nrow(data2),function(x) (data2[x,]-min(data2[x,]))/(max(data2[x,])-min(data2[x,])))
apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x)))
t(apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x))))
data2['AT1G01270',]
data2['AT1G01290',]
minval=min(data2['AT1G01290',])
maxval=max(data2['AT1G01290',])
(data2['AT1G01290',]-minval) / (maxval-minval)
minval
maxval
((data2['AT1G01290',]-minval) / (maxval-minval))
tmp = data2[c(1,2,3),c(1,2,3)]
tmp
apply(tmp,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x)))
t(apply(tmp,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x))))
minval=min(data2['AT1G01010',])
minval
minval=min(tmp['AT1G01010',])
minval
maxval=max(tmp['AT1G01010',])
maxval
((tmp['AT1G01010',]-minval) / (maxval-minval))
minval=min(data2['AT1G01290',])
maxval=max(data2['AT1G01290',])
((data2['AT1G01290',]-minval) / (maxval-minval))
t(apply(tmp,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x))))
t(apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x))))
tmp = data2[c("AT1G01290","AT1G01300"),]
tmp
t(apply(tmp,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x))))
x=t(apply(data2,MARGIN = 1,function(x) (x-min(x))/(max(x)-min(x))))
x['AT1G01290',]
?t
